class Solution
{
    static boolean isvalid(int value,int grid[][],int row,int col){
        for(int i=0;i<9;i++){
            if(grid[row][i]==value)
               return false;
            if(grid[i][col]==value)
               return false;
        }
        int r=row/3;
        int c=col/3;
        for(int i=3*r;i<(3*r)+3;i++){
            for(int j=3*c;j<(3*c)+3;j++){
                if(grid[i][j]==value)
                   return false;
            }
        }
        return true;
    }
    static boolean solve(int grid[][],int row,int col){
        for(int i=1;i<=9;i++){
            if(isvalid(i,grid,row,col)){
                grid[row][col]=i;
                if(SolveSudoku(grid))
                   return true;
                else
                grid[row][col]=0;
            }
        }
        return false;
    }
    static boolean SolveSudoku(int grid[][])
    {
        // add your code here
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==0){
                    if(!solve(grid,i,j)){
                       return false;
                    }
                }
            }
        }
       return true;
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                System.out.print(grid[i][j]+" ");
            }
        }
    }
}



REFERENCE : https://www.geeksforgeeks.org/sudoku-backtracking-7/
